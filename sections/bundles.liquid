
{%- style -%}
  /* General */
 @media (min-width: 990px) {
    [class*="__product-grid-padding"] {
      display: flex;
      flex-direction: row-reverse;
    }
    [class*="__product-grid-padding"] > div:last-child {
      width: 75%;
    }
   .facets-vertical-sort {
     display: none;
   }
  }
  
  
  .collection .full-unstyled-link {
    pointer-events: none;
    text-decoration: none !important;
  }

  .quick-add-modal product-form {
    opacity: .2;
  }

  .quick-add-modal .shopify-payment-button {
    display: none !important;
  }

  .quick-add-modal button:disabled {
    opacity: .5 !important;
  }

  /* Bundle card */
  #lm-bundle-card {
    --bs-progress-height: 8px;
    flex: 1;
  }

  #lm-bundle-card .lm-inner-content {
    /* background: transparent; */
    border: 1px solid rgba(var(--color-foreground), 1);
    padding: 1.5rem 2rem;
    margin: 1rem 0 2rem 2rem;
    position: sticky;
    top: 1.5rem;
    border-radius: var(--product-card-corner-radius);
    transition: all .15s ease-out;
  }

  @media (max-width: 989px) {
    #lm-bundle-card .lm-inner-content {
      position: relative !important;
      top: 0 !important;
      margin-left: 0 !important;
    }
  }

  #lm-bundle-card .title {
    padding-bottom: 1rem;
    margin: 0 0 1.25rem;
    border-bottom: 1px solid rgba(var(--color-foreground), .1);
  }

  #lm-bundle-card .progress-wrapper {
    padding-top: 3.5rem;
  }

  #lm-bundle-card ul.progress-tiers {
    list-style: none;
    display: flex;
    justify-content: flex-end;
    position: relative;
    margin: -3.5rem 0 0;
    padding: 0 0 2.7rem;
    font-weight: 500;
  }

  #lm-bundle-card ul.progress-tiers li {
    position: absolute;
    transform: translate(-50%);
    text-align: center;
    line-height: 1.05;
    display: flex;
    flex-direction: column;
    justify-content: center;
    font-size: 12px;
  }

  #lm-bundle-card ul.progress-tiers li:last-child {
    transform: translate(-80%);
  }

  #lm-bundle-card ul.progress-tiers li:after {
    content: "";
    position: absolute;
    bottom: -12px;
    left: 50%;
    width: 1px;
    height: var(--bs-progress-height);
    background-color: rgba(var(--color-foreground), .5);
  }

  #lm-bundle-card ul.progress-tiers li small {
    opacity: .75;
  }

  #lm-bundle-card .progress-text {
    text-align: center;
    margin: 0.3rem 0 1rem;
    font-size: .9em;
  }

  #lm-bundle-card .lm-bundle-card-prices {
    margin-bottom: 1.25rem;
  }

  #lm-bundle-card .lm-bundle-card-prices p {
    margin: 0;
    line-height: 1.4;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  #lm-bundle-card .lm-bundle-card-prices p s {
    opacity: .75;
    font-size: .9em;
    margin-right: 2px;
  }

  #lm-bundle-card button {
    line-height: 1;
  }

  #lm-bundle-card button.lm-btn-view-contents {
    margin-bottom: 1rem;
    min-height: calc(var(--button-height) + var(--buttons-border-width) * 2);
  }

  /* Sticky card (mobile) */
  #lm-bundle-sticky-card {
    background: rgb(var(--color-background));
    box-shadow: 0 0 1rem rgba(var(--color-foreground), .1);
    border-top: 1px solid rgba(var(--color-foreground), .1);
    position: fixed;
    left: 0;
    bottom: 0;
    width: 100%;
    padding: 1rem 1.5rem 1.5rem;
    transform: translateY(100%);
    transition: all 0.2s ease-out;
    visibility: hidden;
    z-index: 9;
  }

  @media (min-width: 990px) {
    #lm-bundle-sticky-card {
      display: none !important;
    }
  }

  #lm-bundle-sticky-card.show {
    visibility: visible;
    transform: translateY(0);
  }

  #lm-bundle-sticky-card .lm-bundle-card-prices {
    margin-bottom: 1rem;
  }

  #lm-bundle-sticky-card .lm-bundle-card-prices p {
    margin: 0;
    line-height: 1.4;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  #lm-bundle-sticky-card .lm-bundle-card-prices p s {
    opacity: .75;
    font-size: .9em;
    margin-right: 2px;
  }

  #lm-bundle-sticky-card .lm-btn-wrapper {
    display: flex;
    margin: -.5rem;
  }

  #lm-bundle-sticky-card button {
    line-height: 1;
    white-space: nowrap;
    margin: .5rem;
    min-height: calc(3.5rem + var(--buttons-border-width) * 2);
  }

  /* Bundle contents (Dialog) */
  #lm-bundle-dialog {
    padding: 0;
    outline: none;
    border: none;
    box-shadow: 0 0 1rem rgba({{ section.settings.dialog_backdrop_bg_color.red }}, {{ section.settings.dialog_backdrop_bg_color.green }}, {{ section.settings.dialog_backdrop_bg_color.blue }}, 25%);
    border-radius: var(--buttons-radius);
    width: calc(100% - 3rem);
    max-width: {{ section.settings.dialog_max_width}}px;
    opacity: 0;
    transform: translateY(0);
    transition: opacity 0.4s ease-out, transform 0.4s ease-out;
    transition-delay: .2s;
  }

  #lm-bundle-dialog[open] {
    opacity: 1;
    transform: translateY(0);
  }

  @starting-style {
    #lm-bundle-dialog[open] {
      opacity: 0;
      transform: translateY(10vh);
    }
  }

  #lm-bundle-dialog::backdrop {
    background: rgba({{ section.settings.dialog_backdrop_bg_color.red }}, {{ section.settings.dialog_backdrop_bg_color.green }}, {{ section.settings.dialog_backdrop_bg_color.blue }}, 0);
    transition: background-color 0.2s;
    cursor: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23ffffff' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cline x1='18' y1='6' x2='6' y2='18'%3E%3C/line%3E%3Cline x1='6' y1='6' x2='18' y2='18'%3E%3C/line%3E%3C/svg%3E") 24 24, pointer;
  }

  #lm-bundle-dialog[open]::backdrop {
    background: rgba({{ section.settings.dialog_backdrop_bg_color.red }}, {{ section.settings.dialog_backdrop_bg_color.green }}, {{ section.settings.dialog_backdrop_bg_color.blue }}, .5);
  }

  @starting-style {
    #lm-bundle-dialog[open]::backdrop {
      background: rgba({{ section.settings.dialog_backdrop_bg_color.red }}, {{ section.settings.dialog_backdrop_bg_color.green }}, {{ section.settings.dialog_backdrop_bg_color.blue }}, 0);
    }
  }

  #lm-bundle-dialog .lm-dialog-inner { 
    padding: 1.5rem 2rem;
  }

  #lm-bundle-dialog button[data-dialog-close] {
    position: absolute;
    right: 1rem;
    top: 1rem;
    padding: 6px;
    display: flex;
    border: none;
    background: transparent;
    cursor: pointer;
    background: rgba(var(--color-background), 0.75);
    border-radius: 50rem;
    transition: all .2s ease-out;
    color: currentColor;
  }

  #lm-bundle-dialog button[data-dialog-close]:hover,
  #lm-bundle-dialog button[data-dialog-close]:focus {
    background: rgba(var(--color-background), 1);
    transform: rotate(180deg);
  }

  #lm-bundle-dialog .lm-bundle-dialog-header {
    border-bottom: 1px solid rgba(var(--color-foreground), .1);
    padding-bottom: 1rem;
  }

  #lm-bundle-dialog .title {
    margin: 0;
  }

  #lm-bundle-dialog .lm-bundle-dialog-body {
    padding: 1rem 0;
  }

  #lm-bundle-dialog .lm-bundle-contents-item {
    display: flex;
    align-items: center;
    padding: .75rem 0;
  }

  #lm-bundle-dialog .lm-bundle-contents-item-left {
    width: 29%;
    margin-right: 4%;
  }

  #lm-bundle-dialog .lm-bundle-contents-item-left img {
    width: 100%;
    height: auto;
  }

  #lm-bundle-dialog .lm-bundle-contents-item-right {
    flex: 1;
  }

  #lm-bundle-dialog .lm-bundle-contents-item-right .title {
    margin-bottom: .5rem;
  }

  #lm-bundle-dialog .lm-bundle-contents-item-right .lm-variant-title {
    opacity: .5;
    margin-top: -0.2rem;
    margin-bottom: 0.5rem;
  }

  #lm-bundle-dialog .lm-quantity-wrapper {
    display: flex;
  }

  #lm-bundle-dialog .lm-quantity-wrapper button.lm-remove-btn {
    width: auto;
    min-width: auto;
    margin-left: 1rem;
  }

  #lm-bundle-dialog .lm-bundle-dialog-footer {
    border-top: 1px solid rgba(var(--color-foreground), .1);
    padding-top: 1.5rem;
  }

  #lm-bundle-dialog  .lm-bundle-card-prices {
    margin-bottom: 1.25rem;
  }

  #lm-bundle-dialog .lm-bundle-card-prices p {
    margin: 0;
    line-height: 1.4;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  #lm-bundle-dialog  .lm-bundle-card-prices p s {
    opacity: .75;
    font-size: .9em;
    margin-right: 2px;
  }

  #lm-bundle-dialog  button {
    line-height: 1;
  }

  #lm-bundle-dialog button.lm-btn-view-contents {
    margin-bottom: 1rem;
    min-height: calc(3.5rem + var(--buttons-border-width) * 2);
  }

  /* Bootstrap Progress */
  .progress {
    --bs-progress-font-size: 0.75rem;
    --bs-progress-bar-color: #fff;
    --bs-progress-bar-transition: width 0.6s ease;
    display: flex;
    height: var(--bs-progress-height);
    overflow: hidden;
    font-size: var(--bs-progress-font-size);
    border-radius: 50rem;
    background-color: rgba(var(--color-foreground), 0.05);
  }

  .progress-bar {
    display: flex;
    flex-direction: column;
    justify-content: center;
    overflow: hidden;
    color: var(--bs-progress-bar-color);
    text-align: center;
    white-space: nowrap;
    transition: var(--bs-progress-bar-transition);
  }

  @media (prefers-reduced-motion: reduce) {
    .progress-bar {
      transition: none;
    }
  }

  .progress-bar-striped {
    background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
    background-size: var(--bs-progress-height) var(--bs-progress-height);
  }

  .progress-bar-animated {
    animation: 1s linear infinite progress-bar-stripes;
  }

  @media (prefers-reduced-motion: reduce) {
    .progress-bar-animated {
      animation: none;
    }
  }

  @keyframes progress-bar-stripes {
    0% { background-position-x: 1rem; }
  }

{%- endstyle -%}

<script>
window.lm_bundle_builder = {
  max_tier_goal: {{ section.blocks.last.settings.goal | times: 100 }},
  tiers: [
    {% for block in section.blocks %}
      {% if block.type == 'tier' %}
        { goal: {{ block.settings.goal | times: 100 }}, discount: {{ block.settings.discount }} },
      {% endif %}
    {%  endfor %}
  ],
  text: {
    add_to_bundle: '{{ section.settings.text_add_to_bundle }}',
    added_to_bundle: '{{ section.settings.text_added_to_bundle }}',
  }
}
</script>

{%- javascript -%}
  const injectElements = () => {
    const productGridPadding = document.querySelector('[class*="product-grid-padding"]')
    const bundleCard = document.querySelector('#lm-bundle-card')

    productGridPadding.querySelectorAll('.page-width').forEach(elem => {
      elem.classList.remove('page-width')
    })

    productGridPadding.classList.add('page-width')
    productGridPadding.insertAdjacentElement('afterbegin', bundleCard)
  }
  injectElements()
  
  const adjustProductForms = () => {  
    document.querySelectorAll('.collection product-form').forEach(productForm => {
      var newProductForm = document.createElement('lm-bundle-product-form')
      newProductForm.innerHTML = productForm.innerHTML

      productForm.parentNode.replaceChild(newProductForm, productForm)
    })
  }
  adjustProductForms()

  const adjustQuickViewContents = () => {
    const quickAddModal = document.querySelector('quick-add-modal')
      
      const observer = new MutationObserver((mutations) => { 
        setTimeout(() => {
          const productForm = quickAddModal.querySelector('product-form')
          if (!productForm) return

          var newProductForm = document.createElement('lm-bundle-product-form')
          newProductForm.innerHTML = productForm.innerHTML

          productForm.parentNode.replaceChild(newProductForm, productForm)
        }, 500)
      })

      observer.observe(quickAddModal, { 
        attributes: true
      });
  }
  adjustQuickViewContents()

  const reInitAfterAjaxLoad = () => {
    const wrapper = document.querySelector('.collection')

    const observer = new MutationObserver(async (mutations) => {
      setTimeout(() => {
        const productGridPadding = document.querySelector('[class*="product-grid-padding"]')
        
        productGridPadding.querySelectorAll('.page-width').forEach(elem => {
          elem.classList.remove('page-width')
        }) 
        
        adjustProductForms()
        reInitAfterAjaxLoad()
      }, 500)

    })

    observer.observe(wrapper, { 
      attributes: true,
      childList: true,
    });
  }
  reInitAfterAjaxLoad()

  class LmBundleProductForm extends HTMLElement {
    constructor () {
      super()

      setTimeout(() => {
        this.form = this.querySelector('form')
        this.btn = this.querySelector('button[name="add"]')
        this.quickAddModal = this.closest('.quick-add-modal')

        this.form.addEventListener('submit', this.onSubmit.bind(this))
        this.adjustBtn()
        this.handleVariantChange()
      }, 50)
    }

    adjustBtn () {
      if (!this.btn.disabled) {
        this.btn.querySelector('span').textContent = window.lm_bundle_builder.text.add_to_bundle
      }
    }

    handleVariantChange () {
      if (this.quickAddModal) {
        this.quickAddModal.querySelectorAll('variant-selects input').forEach(input => {
          input.addEventListener('change', () => {
            this.btn.style.opacity = '.1'

            setTimeout(() => {
              this.adjustBtn()
              this.btn.style.opacity = '1'
            }, 500)
          })
        })
      }
    }

    async onSubmit (event) {
      event.preventDefault()
         
      this.btn.classList.add('loading')
      this.btn.querySelector('.loading__spinner').classList.remove('hidden') 

      const variantId = Number(this.form.querySelector('[name="id"]').value)

      const bundleContents = JSON.parse(localStorage.getItem('lm-bundle-contents')) || []

      const isInBundleContents = bundleContents.some((item) => item.variant_id === variantId)

      let qty = 1

      if (this.quickAddModal) {
        const qtyFeield = this.quickAddModal.querySelector('input[name="quantity"]')

        if (qtyFeield) {
          qty = Number(qtyFeield.value)
        }
      }

      if (isInBundleContents) {
        bundleContents.map(item => {
          if (item.variant_id === variantId) {
            item.quantity += qty
          }
          return item
        })
      } else {
        let productLink 
      
        if (this.quickAddModal) {
          productLink = this.closest('.product').querySelector('a[href*="products"]').getAttribute('href') 
        } else {
          productLink = this.closest('.card').querySelector('a[href*="products"]').getAttribute('href') 
        }

        productLink = productLink.replace(/(\?.*)|(#.*)/g, "")

        const response = await fetch(`${productLink}.js`)
        const product = await response.json()
        console.log(product)

        const variant = product.variants.find(variant => variant.id === variantId)
        console.log(variant)

        bundleContents.push({
          product_id: product.id,
          product_handle: product.handle,
          product_title: product.title,
          product_image: product.featured_image,
          variant_id: variant.id,
          variant_title: variant.title,
          variant_price: variant.price, 
          variant_compare_at_price: variant.compare_at_price,
          variant_image: variant.featured_image ? variant.featured_image.src : null,
          quantity: qty
        })
      }

      console.log(bundleContents)

      localStorage.setItem('lm-bundle-contents', JSON.stringify(bundleContents))

      this.btn.querySelector('span').textContent = window.lm_bundle_builder.text.added_to_bundle
      this.btn.classList.remove('loading')
      this.btn.querySelector('.loading__spinner').classList.add('hidden') 
      
      window.dispatchEvent(new CustomEvent('lm_bundle_builder_add_to_bundle'))

      setTimeout(() => {
        this.quickAddModal?.hide()
      }, 1000)

      setTimeout(() => {
        this.btn.querySelector('span').textContent = window.lm_bundle_builder.text.add_to_bundle

        this.quickAddModal?.hide()
      }, 2000)
    }
  }
  customElements.define('lm-bundle-product-form', LmBundleProductForm)

  class LmBundleCard extends HTMLElement {
    constructor () {
      super ()
  
      this.updateContents()
      this.fixStickyPosition()

      window.addEventListener('lm_bundle_builder_add_to_bundle', () => {
        this.updateContents()
      })

      document.querySelectorAll('.lm-btn-atc').forEach(btn => {
        btn.addEventListener('click', () => {
          this.onAddToCart(btn)
        })
      })
    }

    getBundleContents () {
      return JSON.parse(localStorage.getItem('lm-bundle-contents')) || []
    }

    getTotalPrice () {
      return this.getBundleContents().reduce((accumulator, currentValue) =>
        (currentValue.variant_price * currentValue.quantity) + accumulator, 0)
    }

    updateContents () {
      const totalPrice = this.getTotalPrice()
      const progressBar = this.querySelector('.progress-bar') 
      const progressText = this.querySelector('.progress-text') 
      const tiers = window.lm_bundle_builder.tiers
      const maxTierGoal = window.lm_bundle_builder.max_tier_goal
      let progressWidth = Math.round(totalPrice / maxTierGoal * 100)

      if (progressWidth > 100) progressWidth = 100
      
      setTimeout(() => {
        progressBar.style.width = `${progressWidth}%`

        if (progressWidth >= 100) {
          progressBar.style.backgroundColor = progressBar.dataset.colorCompleted
        } else {
          progressBar.style.backgroundColor = progressBar.dataset.colorNotCompleted 
        }
      }, 200)

      if (totalPrice <= maxTierGoal) {
        const tier = tiers.find(elem => elem.goal > totalPrice)
        const remaining = this.formatMoney(tier.goal - totalPrice).replace('.00', '')
        const discount = tier.discount + '%' 
        let textUncompleted = progressText.dataset.textUncompleted
        textUncompleted = textUncompleted.replace('[value]', `<b>${remaining}</b>`)
        textUncompleted = textUncompleted.replace('[discount]', `<b>${discount}</b>`)
        progressText.innerHTML = textUncompleted
        progressText.style.color = ''
      } else {
        const discount = tiers[tiers.length - 1].discount + '%'

        let textCompleted = progressText.dataset.textCompleted
        textCompleted = textCompleted.replace('[discount]', `<b>${discount}</b>`)
        progressText.innerHTML = textCompleted
        progressText.style.color = progressBar.dataset.colorCompleted
      }

      document.querySelectorAll('[data-lm-bundle-price]').forEach(elem => {
        const tier = tiers.slice().reverse().find(elem => elem.goal <= totalPrice)

        if (tier) {
          const compareAtPrice = this.formatMoney(totalPrice)
          const price = this.formatMoney((1 - (tier.discount / 100)) * totalPrice)
          elem.innerHTML = `
            <span class="visually-hidden visually-hidden--inline">Regular price</span>
            <s>${compareAtPrice}</s> 
            <span class="visually-hidden visually-hidden--inline">Sale price</span>
            <b>${price}</b>
          `
        } else {
          elem.innerHTML = this.formatMoney(totalPrice)
        }
      })

      document.querySelectorAll('[data-lm-bundle-discount]').forEach(elem => {
        const tier = tiers.slice().reverse().find(elem => elem.goal <= totalPrice)

        const tierDiscount = tier?.discount || 0

        const savings = this.formatMoney(tierDiscount / 100 * totalPrice)
        elem.innerHTML = `${savings} (${tierDiscount}%)`
      }) 

      document.querySelectorAll('.lm-btn-view-contents').forEach(elem => {
        elem.disabled = totalPrice === 0
      })

      document.querySelectorAll('.lm-btn-atc').forEach(elem => {
        elem.disabled = totalPrice === 0
      })
    } 

    async onAddToCart (btn) {
      btn.classList.add('loading')
      btn.querySelector('.loading__spinner').classList.remove('hidden') 

      const items = this.getBundleContents().reduce((accumulator, currentValue) => {
        accumulator.push({
          id: currentValue.variant_id,
          quantity: currentValue.quantity
        })
        return accumulator
      }, []) 

      const cart = document.querySelector('cart-notification') || document.querySelector('cart-drawer')
      let sections = cart.getSectionsToRender().map((section) => section.id)

      const response = await fetch(`${window.Shopify.routes.root}cart/add.js`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ items, sections })
      })
      const responseData = await response.json()

      localStorage.removeItem('lm-bundle-contents')
      this.updateContents()

      if (btn.dataset.redirectToCheckout === 'true') {
        window.location.href = '/checkout'
        return
      }

      btn.classList.remove('loading')
      btn.querySelector('.loading__spinner').classList.add('hidden')
      
      document.querySelector('#lm-bundle-dialog')?.close()
      
      cart.renderContents(responseData)
      if (cart && cart.classList.contains('is-empty')) cart.classList.remove('is-empty')
    }

    fixStickyPosition () {
      const elem = this.querySelector('.lm-inner-content')
      let oldScroll = window.scrollY

      window.addEventListener('scroll', (event) => {
        if (!document.querySelector('.shopify-section-header-sticky')) return
  
        const newScroll = window.scrollY

        if (newScroll > oldScroll) {
          elem.style.top = '1.5rem'
        } else if (newScroll < oldScroll) {
          elem.style.top = 'calc(var(--header-height) + 1.5rem)'
        }

        oldScroll = Math.max(window.scrollY, 0)
      })
    }

    formatMoney (cents, moneyFormat = this.dataset.moneyFormat) {
      if (typeof cents === 'string') {
        cents = cents.replace('.', '')
      }

      let value = ''
      const placeholderRegex = /\{\{\s*(\w+)\s*\}\}/

      function defaultOption (opt, def) {
        return (typeof opt === 'undefined' ? def : opt)
      }

      function formatWithDelimiters (number, precision, thousands, decimal) {
        precision = defaultOption(precision, 2)
        thousands = defaultOption(thousands, ',')
        decimal = defaultOption(decimal, '.')

        if (isNaN(number) || number == null) {
          return 0
        }

        number = (number / 100.0).toFixed(precision)

        const parts = number.split('.')
        const dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands)
        const cents = parts[1] ? (decimal + parts[1]) : ''

        return dollars + cents
      }

      switch (moneyFormat.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2)
        break
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0)
        break
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',')
        break
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',')
        break
      }

      return moneyFormat.replace(placeholderRegex, value)
    }
  }
  customElements.define('lm-bundle-card', LmBundleCard)

  class LmBundleStickyCard extends HTMLElement {
    constructor () {
      super()

      const bundleCard = document.querySelector('#lm-bundle-card')

      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            this.classList.remove('show')
          } else {
            this.classList.add('show')
          }
        })
      }, { threshold: 0 })

      observer.observe(bundleCard)
    }
  }
  customElements.define('lm-bundle-sticky-card', LmBundleStickyCard)

  class LmBundleDialog extends HTMLElement {
    constructor () {
      super()

      this.dialog = this.querySelector('dialog')

      document.querySelectorAll('.lm-btn-view-contents').forEach(btn => {
        btn.addEventListener('click', () => {
          this.dialog.showModal()
          document.querySelector('body').classList.add('overflow-hidden')
        })
      })

      // Close dialog if clicked outside
      this.dialog.addEventListener('click', (event) => {
        const withinBoundaries = event.composedPath().includes(this.dialog.querySelector('.lm-dialog-inner'))

        if (!withinBoundaries) {
          this.dialog.close()
        }
      })

      this.dialog.querySelector('data-dialog-close')?.addEventListener('click', (event) => {
        event.preventDefault()
        this.dialog.close()
      })

      this.dialog.addEventListener('close', (event) => {
        document.querySelector('body').classList.remove('overflow-hidden')
      })

      this.buildContents()

      window.addEventListener('lm_bundle_builder_add_to_bundle', () => {
        this.buildContents()
      })
    }

    getBundleContents () {
      return JSON.parse(localStorage.getItem('lm-bundle-contents')) || []
    }

    buildContents () {
      const wrapper = this.querySelector('.lm-bundle-contents')
      wrapper.innerHTML = ''

      let bundleContentsList = ''

      this.getBundleContents().forEach(elem => {
        const image = elem.variant_image || elem.product_image
      
        bundleContentsList += `
          <div class="lm-bundle-contents-item" role="listitem">
            <div class="lm-bundle-contents-item-left">
              <img 
                src="${this.resizeImage(image, `600x600`, 'center')}"
                class="" 
                alt="" 
                width="600" 
                height="600" 
                loading="lazy">
            </div>
            <div class="lm-bundle-contents-item-right">
              <h3 class="title h4">
                ${elem.product_title}
              </h3>
              <p class="lm-variant-title product-option" ${elem.variant_title === 'Default Title' ? 'hidden': ''}>
                ${elem.variant_title}
              </p>
              <p class="lm-variant-price product-option">
                ${document.querySelector('#lm-bundle-card').formatMoney(elem.variant_price)}
              </p>
              <div class="lm-quantity-wrapper">
                <quantity-input class="quantity">
                  <button class="quantity__button no-js-hidden disabled" name="minus" type="button">
                    <span class="visually-hidden">Decrease quantity</span>
                    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" class="icon icon-minus" fill="none" viewBox="0 0 10 2">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M.5 1C.5.7.7.5 1 .5h8a.5.5 0 110 1H1A.5.5 0 01.5 1z" fill="currentColor"></path>
                    </svg>
                  </button>
                  <input 
                    class="quantity__input" 
                    type="number"
                    value="${elem.quantity}" 
                    min="1" 
                    step="1" 
                    aria-label="Quantity"
                    data-variant-id="${elem.variant_id}"
                    onchange="document.querySelector('lm-bundle-dialog').updateItemQty(this, event)">
                  <button class="quantity__button no-js-hidden" name="plus" type="button">
                    <span class="visually-hidden">Increase quantity</span>
                    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" class="icon icon-plus" fill="none" viewBox="0 0 10 10">
                      <path fill-rule="evenodd" clip-rule="evenodd" d="M1 4.51a.5.5 0 000 1h3.5l.01 3.5a.5.5 0 001-.01V5.5l3.5-.01a.5.5 0 00-.01-1H5.5L5.49.99a.5.5 0 00-1 .01v3.5l-3.5.01H1z" fill="currentColor">
                      </path>
                    </svg>
                  </button>
                </quantity-input>
                <button
                  type="button" 
                  class="button button--tertiary lm-remove-btn" 
                  aria-label="Remove" 
                  data-variant-id="${elem.variant_id}"
                  onclick="document.querySelector('lm-bundle-dialog').removeItem(this, event)">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16" aria-hidden="true" focusable="false" class="icon icon-remove">
                    <path d="M14 3h-3.53a3.07 3.07 0 00-.6-1.65C9.44.82 8.8.5 8 .5s-1.44.32-1.87.85A3.06 3.06 0 005.53 3H2a.5.5 0 000 1h1.25v10c0 .28.22.5.5.5h8.5a.5.5 0 00.5-.5V4H14a.5.5 0 000-1zM6.91 1.98c.23-.29.58-.48 1.09-.48s.85.19 1.09.48c.2.24.3.6.36 1.02h-2.9c.05-.42.17-.78.36-1.02zm4.84 11.52h-7.5V4h7.5v9.5z" fill="currentColor"></path>
                    <path d="M6.55 5.25a.5.5 0 00-.5.5v6a.5.5 0 001 0v-6a.5.5 0 00-.5-.5zM9.45 5.25a.5.5 0 00-.5.5v6a.5.5 0 001 0v-6a.5.5 0 00-.5-.5z" fill="currentColor"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        ` 
      })

      wrapper.insertAdjacentHTML('afterbegin', bundleContentsList)
    }

    updateItemQty (input, event) {
      const variantId = Number(input.dataset.variantId)
      const newQty = Number(input.value)

      let bundleContents = this.getBundleContents()

      bundleContents.map(item => {
        if (item.variant_id === variantId) {
          item.quantity = newQty
        }
        return item
      })

      localStorage.setItem('lm-bundle-contents', JSON.stringify(bundleContents))
    
      this.buildContents()
      document.querySelector('#lm-bundle-card').updateContents()
    }

    removeItem (btn, event) {
      const variantId = Number(btn.dataset.variantId)

      let bundleContents = this.getBundleContents()

      bundleContents = bundleContents.filter(item => item.variant_id !== variantId)

      localStorage.setItem('lm-bundle-contents', JSON.stringify(bundleContents))
    
      this.buildContents()
      document.querySelector('#lm-bundle-card').updateContents()

      if (!bundleContents.length) {
        this.dialog.close()
      }
    }

    resizeImage = function (src, size, crop = '') {
      return src.replace(/_(pico|icon|thumb|small|compact|medium|large|grande|original|1024x1024|2048x2048|master)+\./g, '.')
        .replace(/\.jpg|\.png|\.gif|\.jpeg/g, (match) => {
          if (crop.length) {
            crop = `_crop_${crop}`
          }
          return `_${size}${crop}${match}`
        })
    }
  }
  customElements.define('lm-bundle-dialog', LmBundleDialog)
{%- endjavascript -%}

{% capture lm_atc_btn %}
  <button
    class="lm-btn-atc button button--full-width" 
    type="button"
    data-redirect-to-checkout="{{ section.settings.redirect_to_checkout }}"
    disabled>
    <span>
      {% if section.settings.redirect_to_checkout %}
        {{ section.settings.text_checkout }}
      {% else %}
        {{ section.settings.text_add_bundle_to_cart }}
      {% endif %}
    </span>
    <div class="loading__spinner hidden">
      <svg aria-hidden="true" focusable="false" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
        <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
      </svg>
    </div>
  </button>
{% endcapture %}

<div hidden>
  <lm-bundle-card 
    id="lm-bundle-card"
    data-money-format="{{ shop.money_format }}">
    <div 
      class="lm-inner-content color-{{ section.settings.card_color_scheme }} gradient"
      style="border-width: {{ section.settings.card_border_width }}px;">
      <h2 class="title inline-richtext {{ section.settings.card_title_size }}">
        {{ section.settings.card_title }}
      </h2>
      <div class="progress-wrapper">
        <ul class="progress-tiers" aria-label="Available discount tiers">
          {% for block in section.blocks %}
            {% liquid
              assign max_tier_goal = section.blocks.last.settings.goal
              assign tier_left = max_tier_goal | minus: block.settings.goal | minus: max_tier_goal | remove: '-' | times: 100 | divided_by: max_tier_goal | round | append: '%' 
            %}
            {% if block.type == 'tier' %}
              <li style="left: {{ tier_left }}">
                {{ block.settings.goal | times: 100 | money_without_trailing_zeros }}
                <small>
                  {{ block.settings.discount | prepend: '-' | append: '%' }}
                </small>
              </li>
            {% endif %}
          {% endfor %}
        </ul>
        <div 
          class="progress"  
          role="progressbar"
          aria-hidden="true">
          <div 
            class="progress-bar progress-bar-striped progress-bar-animated" 
            data-color-not-completed="{{ section.settings.progress_color_not_completed }}"
            data-color-completed="{{ section.settings.progress_color_completed }}"
            style="width: 0%;">
          </div>
        </div>
        <p 
          class="progress-text" 
          data-text-uncompleted="{{ section.settings.text_progress_uncompleted }}" 
          data-text-completed="{{ section.settings.text_progress_completed }}">
        </p>
        <div class="lm-bundle-card-prices">
          <p>
            <span>
              {{ section.settings.text_bundle_price }}
            </span>
            <span data-lm-bundle-price></span>
          </p>
          <p>
            <span>
              {{ section.settings.text_you_save }}
            </span>
            <span data-lm-bundle-discount></span>
          </p>
        </div>
        <button
          class="lm-btn-view-contents button button--full-width button--secondary" 
          type="button"
          disabled>
          <span>
            {{ section.settings.text_view_bundle_contents }}
          </span>
        </button>
        {{ lm_atc_btn }}
      </div>
    </div>
  </lm-bundle-card>
</div>

<lm-bundle-dialog>
  <dialog 
    id="lm-bundle-dialog"
    class="color-{{ section.settings.dialog_color_scheme }} gradient">
    <button data-dialog-close aria-label="Close">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"/>
      </svg>
    </button>
    <div class="lm-dialog-inner">
      <div class="lm-bundle-dialog-header">
        <h2 class="title inline-richtext {{ section.settings.dialog_heading_size }}">
          {{ section.settings.dialog_heading }}
        </h2>
      </div>
      <div class="lm-bundle-dialog-body">
        <div class="lm-bundle-contents" role="list"></div>
      </div>
      <div class="lm-bundle-dialog-footer">
        <div class="lm-bundle-card-prices">
          <p>
            <span>
              {{ section.settings.text_bundle_price }}
            </span>
            <span data-lm-bundle-price></span>
          </p>
          <p>
            <span>
              {{ section.settings.text_you_save }}
            </span>
            <span data-lm-bundle-discount></span>
          </p>
        </div>
        {{ lm_atc_btn }}
      </div>
    </div>
  </dialog>
</lm-bundle-dialog>

<lm-bundle-sticky-card 
  id="lm-bundle-sticky-card">
  <div class="lm-bundle-card-prices">
    <p>
      <span>
        {{ section.settings.text_bundle_price }}
      </span>
      <span data-lm-bundle-price></span>
    </p>
    <p>
      <span>
        {{ section.settings.text_you_save }}
      </span>
      <span data-lm-bundle-discount></span>
    </p>
  </div>
  <div class="lm-btn-wrapper">
    <button
      class="lm-btn-view-contents button button--full-width button--secondary" 
      type="button"
      disabled>
      <span>
        {{ section.settings.text_view_bundle_contents }}
      </span>
    </button>
    {{ lm_atc_btn }}
  </div>
</lm-bundle-sticky-card>

{% schema %}
{
  "name": "Bundle Builder",
  "disabled_on": {
  "groups": ["header", "footer", "custom.popup"]
   },
  "limit": 1,
  "settings": [
    {
      "type": "header",
      "content": "Bundle Card"
    },
    {
      "type": "color_scheme",
      "id": "card_color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "background-1"
    },
    {
      "type": "range",
      "id": "card_border_width",
      "label": "Border width",
      "min": 0,
      "max": 10,
      "step": 1,
      "default": 1
    },
    {
      "type": "inline_richtext",
      "id": "card_title",
      "label": "Title",
      "default": "My Bundle"
    },
    {
      "type": "select",
      "id": "card_title_size",
      "label": "Heading size",
      "options": [
        { "value": "h3", "label": "Small" },
        { "value": "h2", "label": "Medium" }
      ],
      "default": "h2"
    },
    {
      "type": "color",
      "id": "progress_color_not_completed",
      "label": "Progress color - not completed",
      "default": "#ffc107"
    },
    {
      "type": "color",
      "id": "progress_color_completed",
      "label": "Progress color - Completed",
      "default": "#198754"
    },
    {
      "type": "checkbox",
      "id": "redirect_to_checkout",
      "label": "Redirect to checkout (skip cart)",
      "default": false
    },
    {
      "type": "header",
      "content": "Bundle contents (Dialog)"
    },
    {
      "type": "inline_richtext",
      "id": "dialog_heading",
      "label": "Heading",
      "default": "Bundle Contents"
    },
    {
      "type": "select",
      "id": "heading_size",
      "label": "Heading size",
      "options": [
        { "value": "h3", "label": "Small" },
        { "value": "h2", "label": "Medium" }
      ],
      "default": "h2"
    },
    {
      "type": "text",
      "id": "dialog_max_width",
      "label": "Max-width (px)",
      "default": "500"
    },
    {
      "type": "color",
      "id": "dialog_backdrop_bg_color",
      "label": "Backdrop bg color",
      "default": "#121212"
    },
    {
      "type": "header",
      "content": "Translation"
    },
    {
      "type": "text",
      "id": "text_add_to_bundle",
      "label": "Add to bundle",
      "default": "Add to bundle"
    },
    {
      "type": "text",
      "id": "text_added_to_bundle",
      "label": "Added to bundle",
      "default": "✓ Added!"
    },
    {
      "type": "text",
      "id": "text_progress_uncompleted",
      "label": "Progress - uncompleted",
      "default": "Add [value] to save [discount]"
    },
    {
      "type": "text",
      "id": "text_progress_completed",
      "label": "Progress - completed",
      "default": "Congrats! You're eligible for [discount] off!"
    },
    {
      "type": "text",
      "id": "text_bundle_price",
      "label": "Bundle price",
      "default": "Bundle price"
    },
    {
      "type": "text",
      "id": "text_you_save",
      "label": "You save",
      "default": "You save"
    },
    {
      "type": "text",
      "id": "text_view_bundle_contents",
      "label": "View bundle contents",
      "default": "View bundle"
    },
    {
      "type": "text",
      "id": "text_add_bundle_to_cart",
      "label": "Add bundle to cart",
      "default": "Add to cart"
    },
    {
      "type": "text",
      "id": "text_checkout",
      "label": "Checkout",
      "default": "Check out"
    }
  ],
  "blocks": [
    {
      "type": "tier",
      "name": "Tier",
      "settings": [
        {
          "type": "text",
          "id": "goal",
          "label": "Goal"
        },
        {
          "type": "range",
          "id": "discount",
          "label": "Discount",
          "min": 0,
          "max": 100,
          "default": 0,
          "unit": "%"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Bundle Builder",
      "blocks": [
        {
          "type": "tier",
          "settings": {
            "goal": "100",
            "discount": 10
          }
        },
        {
          "type": "tier",
          "settings": {
            "goal": "200",
            "discount": 20
          }
        },
        {
          "type": "tier",
          "settings": {
            "goal": "300",
            "discount": 30
          }
        }
      ]
    }
  ]
}
{% endschema %}
